{"version":3,"sources":["../package.json","scripts/index.js"],"names":["module","exports","name","version","description","keywords","homepage","bugs","url","email","license","author","repository","type","scripts","test","start","build","devDependencies","acorn","autoprefixer","eslint","stylelint","private","apiEndpoint","channels","searchTermElement","$","statusFilterElements","channelsElement","versionElement","makeTwitchRequest","id","success","error","getJSON","done","fail","addToDOM","channelInformation","prepend","href","status","logo","longDescription","shortDescription","addStreamInformation","res","channelAndStreamInformation","Object","assign","stream","channel","game","handleGetStream","makeStreamRequest","getOpenChannelInformation","missingLogo","handleGetChannelSuccess","getClosedChannelDescription","getClosedChannelInformation","err","handleGetChannelError","responseJSON","makeChannelRequest","applyStatusFilter","channelLinks","statusFilter","filter","val","not","hide","applySearchTermFilter","searchTerm","toLowerCase","each","_","e","includes","applyFilters","show","change","keyup","forEach","text"],"mappings":"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","file":"scripts.c780b88a.js","sourceRoot":"../src","sourcesContent":["module.exports={name:\"twitch-status-viewer\",version:\"1.1.0\",description:\"Intermediate Front End Development Project for FreeCodeCamp\",keywords:[\"twitch status viewer\",\"freecodecamp\"],homepage:\"https://twitch.mikelowe.xyz/\",bugs:{url:\"https://github.com/vanillaSlice/TwitchStatusViewer/issues\",email:\"mikelowedev@gmail.com\"},license:\"MIT\",author:{name:\"Mike Lowe\",email:\"mikelowedev@gmail.com\",url:\"https://www.mikelowe.xyz/\"},repository:{type:\"git\",url:\"https://github.com/vanillaSlice/TwitchStatusViewer.git\"},scripts:{test:\"run-s test:*\",\"test:lint\":\"run-s test:lint:*\",\"test:lint:css\":\"stylelint src/**/*.css\",\"test:lint:js\":\"eslint src/**/*.js\",start:\"parcel src/index.html -d build\",build:\"parcel build src/index.html -d build --public-url ./\"},devDependencies:{acorn:\"^6.0.6\",autoprefixer:\"^9.4.7\",eslint:\"^5.13.0\",\"eslint-config-airbnb-base\":\"^13.1.0\",\"eslint-plugin-import\":\"^2.16.0\",\"npm-run-all\":\"^4.1.5\",\"parcel-bundler\":\"^1.12.3\",\"parcel-plugin-browserconfig\":\"^1.0.0\",stylelint:\"^9.10.1\",\"stylelint-config-recommended\":\"^2.1.0\"},private:!0};","import missingLogo from '../images/missing-logo.png';\nimport { version } from '../../package.json';\n\n/*\n * Constants\n */\n\nconst apiEndpoint = 'https://wind-bow.glitch.me/twitch-api';\nconst channels = [\n  'brunofin',\n  'comster404',\n  'cretetion',\n  'freecodecamp',\n  'habathcx',\n  'noobs2ninjas',\n  'OgamingSC2',\n  'RobotCaleb',\n  'storbeck',\n];\n\n/*\n * DOM Elements\n */\n\nconst searchTermElement = $('.js-search-term');\nconst statusFilterElements = $('.js-status-filter');\nconst channelsElement = $('.js-channels');\nconst versionElement = $('.js-version');\n\n/*\n * Functions\n */\n\nfunction makeTwitchRequest(type, id, success, error) {\n  $.getJSON(`${apiEndpoint}/${type}/${id}`)\n    .done(success)\n    .fail(error);\n}\n\nfunction addToDOM(channelInformation) {\n  channelsElement.prepend(\n    `<a href=\"${channelInformation.href}\" class=\"channel channel--${channelInformation.status} clearfix js-channel js-${channelInformation.status}\" id=\"${channelInformation.id}\">`\n    + '<div class=\"col-xs-12 col-sm-2 text-center\">'\n    + `<img src=\"${channelInformation.logo}\" class=\"channel__img img-circle\" alt=\"${channelInformation.id} logo\" title=\"${channelInformation.id}\">`\n    + '</div>'\n    + '<div class=\"ellipsis col-sm-10\">'\n    + `<strong class=\"col-xs-12 col-sm-2 text-center\">${channelInformation.id}</strong>`\n    + '<div class=\"ellipsis col-xs-12 col-sm-9 col-sm-offset-1 text-center\">'\n    + `<span class=\"hidden-xs\">${channelInformation.longDescription}</span>`\n    + `<span class=\"hidden-sm hidden-md hidden-lg\">${channelInformation.shortDescription}</span>`\n    + '</div>'\n    + '</div>'\n    + '</a>',\n  );\n}\n\nfunction addStreamInformation(channelInformation, res) {\n  const channelAndStreamInformation = Object.assign({}, channelInformation);\n\n  if (!res.stream) {\n    channelAndStreamInformation.status = 'offline';\n    channelAndStreamInformation.longDescription = 'Offline';\n    channelAndStreamInformation.shortDescription = 'Offline';\n  } else {\n    channelAndStreamInformation.status = 'online';\n    channelAndStreamInformation.longDescription = `${res.stream.channel.game}: ${res.stream.channel.status}`;\n    channelAndStreamInformation.shortDescription = res.stream.channel.game;\n  }\n\n  return channelAndStreamInformation;\n}\n\nfunction handleGetStream(channelInformation) {\n  return res => addToDOM(addStreamInformation(channelInformation, res));\n}\n\nfunction makeStreamRequest(channelInformation) {\n  makeTwitchRequest(\n    'streams',\n    channelInformation.id,\n    handleGetStream(channelInformation),\n  );\n}\n\nfunction getOpenChannelInformation(channel, res) {\n  return {\n    id: channel,\n    href: res.url,\n    logo: res.logo || missingLogo,\n  };\n}\n\nfunction handleGetChannelSuccess(channel) {\n  return res => makeStreamRequest(getOpenChannelInformation(channel, res));\n}\n\nfunction getClosedChannelDescription(status) {\n  if (status === 404) {\n    return 'Channel does not exist';\n  }\n  if (status === 422) {\n    return 'Channel is unavailable';\n  }\n  return 'Could not retrieve channel information';\n}\n\nfunction getClosedChannelInformation(channel, err) {\n  const description = getClosedChannelDescription(err.status);\n\n  return {\n    id: channel,\n    status: 'closed',\n    href: '#',\n    logo: missingLogo,\n    longDescription: description,\n    shortDescription: description,\n  };\n}\n\nfunction handleGetChannelError(channel) {\n  return err => addToDOM(getClosedChannelInformation(channel, err.responseJSON));\n}\n\nfunction makeChannelRequest(channel) {\n  makeTwitchRequest(\n    'channels',\n    channel,\n    handleGetChannelSuccess(channel),\n    handleGetChannelError(channel),\n  );\n}\n\nfunction applyStatusFilter(channelLinks) {\n  const statusFilter = statusFilterElements.filter(':checked').val();\n\n  if (statusFilter === 'online') {\n    channelLinks.not('.js-online').hide();\n  } else if (statusFilter === 'offline') {\n    channelLinks.not('.js-offline, .js-closed').hide();\n  }\n}\n\nfunction applySearchTermFilter(channelLinks) {\n  const searchTerm = searchTermElement.val().toLowerCase();\n\n  channelLinks.filter(':visible').each((_, e) => {\n    if (!e.id.toLowerCase().includes(searchTerm)) {\n      $(e).hide();\n    }\n  });\n}\n\nfunction applyFilters() {\n  const channelLinks = $('.js-channel');\n  channelLinks.show();\n  applyStatusFilter(channelLinks);\n  applySearchTermFilter(channelLinks);\n}\n\n/*\n * Initialise\n */\n\nstatusFilterElements.change(applyFilters);\nsearchTermElement.keyup(applyFilters);\nchannels.forEach(channel => makeChannelRequest(channel));\nversionElement.text(version);\n"]}